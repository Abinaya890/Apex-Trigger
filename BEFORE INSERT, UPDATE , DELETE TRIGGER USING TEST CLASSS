trigger AccountTrigger on Account (before insert ,before update,before delete) 
{
    if(Trigger.isBefore)
    { 
        If(Trigger.isInsert) 
        {
            accountHandler.beforeInsertMethod(Trigger.new);       
        }
        
        Else if(Trigger.isUpdate)
            
        {           
             accountHandler.beforeUpdateMethod(Trigger.new);
        }
        
        Else if(Trigger.isDelete)
            
        {
            system.debug(Trigger.isDelete + '            '+Trigger.old);
          accountHandler.beforeDeleteMethod(Trigger.old);   
        } 
    }
    
    Else if(Trigger.isAfter)
        
    {
        
        If(Trigger.isInsert)
            
        {
            
            // write the code for after insert
            
        }
        
        Else if(Trigger.isUpdate)
            
        {
            
            // write the code for after update
            
        }
        
        Else if(Trigger.isDelete)
            
        {
            
            // write the code for after delete
            
        }
        
        Else if(Trigger.isUndelete)
            
        {
            
            // write the code for after undelete
            
        }
        
    }
}


------------------------------------------------------------------------

public class accountHandler {
    
    public static void beforeInsertMethod(List<Account>ac)
    {
        for(Account a : ac)
        {
            a.Description =a.Name + ' Senior Salesforce Developer';
            system.debug('beforeInsertMethod');
        }
          system.debug('After Insert =='+ac);
    }
    
     public static void beforeUpdateMethod(List<Account>ac)
    {
         for(Account a : ac)
        {
            
            
            if(a.Type == 'Prospect')
            {
                a.Sic = '101';
               
            }
           
        }
    }
    
     public static void beforeDeleteMethod(List<Account>ac)
    {
        for(Account a : ac)
        {
                if(a.rating == 'Hot')
                {
                   a.Rating.addError('Unable to delete Rating Hot Record');
                }    
        }
    }
    
}


----------------------------------------------------------------------------------------------

@isTest
public class accountHandlerTest {
    
    
    @isTest
  public  static void testBeforeInsertMethod() {
        // Create test accounts
          List<Account> testAccounts = new List<Account>();
          Account a = new Account();
          a.Name = 'kce Account';
             testAccounts.add(a);
            testAccounts.add(new Account(Name = 'snr Account'));
          insert testAccounts;
 
        System.assertEquals('kce Account', testAccounts[0].Name);
        System.assertEquals('snr Account', testAccounts[1].Name);
    }
    
     @isTest
  public  static void testbeforeUpdateMethod() {
      
      //Create Test Data
      List<Account> testAccounts = new List<Account>();
          Account a = new Account();
          a.Name = 'kce Account';
            a.Type ='Prospect';
      
             testAccounts.add(a);
            testAccounts.add(new Account(Name = 'snr Account', Type ='Prospect'));
          insert testAccounts;
        // Create test accounts
          List<Account> updatedata = [select Id,Name,Sic,Type FROM Account WHERE Type = 'Prospect'];
      system.debug('updatedata=='+updatedata);
          For(Account ac :testAccounts)
          {
              ac.Name =ac.Name + 'Pvt.Ltd';
    
          }
            update testAccounts;
    
          System.assertEquals('101', updatedata[0].Sic);
          System.assertEquals('101', updatedata[1].Sic);
    }
}
